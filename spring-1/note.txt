IOC(Invesion Of Control):控制翻转，反转资源获取的方向。容器主动的将资源推送给它所管理的组件，组件所要做的是选择一种合适的方式来接受资源。
DI(Dependency Injection):依赖注入，IOC的另一种表述形式。组件以一些预先定义好的方式，接受来自容器的资源注入。
--interface BeanFactory
	--interface ApplicationContext:在初始化上下文时就实例化所有单例的Bean
		--interface ConfigurableApplicationContext:新增refresh()和close(),让ApplicationContext具有启动、刷新和关闭上下文的能力
			--ClassPathXmlApplicationContext:从类路径下加载配置文件
			--FileSystemXmlApplicationContext:从文件系统中加载配置文件
bean的配置方式：全类名、工厂方法(静态、实例)、FactoryBean
依赖注入的三种方式：属性注入、构造方法注入、基于注解注入(@Autowired、@Resource、@Inject)

自动装配：
	1.byType:根据类型自动装配
	2.byName:根据名称自动装配
	3.constructor:通过构造器自动装配
	
SpEL：spring的el表达式，#{...}，为bean属性进行动态赋值提供了便利

IOC容器对Bean的生命周期管理的过程：
	1.通过构造器或工厂方法创建Bean实例
	2.为Bean的属性设置值和对其它Bean的引用
	3.将bean实例传递给BeanPostProcessor: postProcessBeforeInitialization()
	4.调用Bean的初始化方法  init-method
	5.将bean实例传递给BeanPostProcessor: postProcessAfterInitialization()
	6.Bean可以使用了
	7.当容器关闭时调用Bean的销毁方法 destory-method
	
Bean后置处理器：允许在调用bean的初始化方法前后对bean进行额外的处理，bean后置处理器对IOC容器里所有Bean实例进行逐一处理而非单一实例
			implements interface BeanPostProcessor: postProcessAfterInitialization(){...},postProcessBeforeInitialization(){...}
			
基于注解配置bean：@Component @Repository @Service @Controller
			  <context:componetn-scan base-package="" resource-pattern=""> <context:include-filter> <context:exclude-filter>
			  自动注册AutowiredAnnotationBeanPostProcessor实例，自动装配具有
			  	@Autowird:属性(即使是非public)、构造器、具有参数的方法 
			  	@Resource 
			  	@Inject
			  注解的属性