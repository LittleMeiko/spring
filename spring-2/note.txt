AOP(Aspect-Oriented Programming):面向切面编程
AOP的主要编程对象是“切面”，而切面即：横切关注点的模块化
AOP相关术语：
	切面(Aspect):横切关注点(跨应用程序多个模块的功能)被模块化的特殊对象:
	通知(Advice):切面必须要完成的工作，标注有某种注解的简单的Java方法，ASpectJ支持五种类型的通知注解
	   ① @Before：前置通知
	   ② @After：后置通知
	   ③ @AfterReturning：返回通知，在方法返回结果之后执行
	   ④ @AfterThrowing：异常通知，在方法抛出异常之后执行
	   ⑤ @Around：环绕通知，围绕着方法执行
	   ⑥ 引入通知：不常用
		
	目标(Target):被通知的对象
	代理(Proxy):向目标对象应用通知之后创建的对象
	连接点(Joinpoint):程序执行的某个特定位置
	切点(Pointcut):每个类都拥有多个连接点。连接点是程序类中客观存在的事务，AOP通过切点定位到特定的连接点。
				  连接点相当于数据库中的记录，切点相当于查询条件。
ASpectJ：Java社区里最完整最流行的AOP框架

Spring AOP:
(1)导入jar包：
	aopalliance-1.0.jar
	aspectjweaver-1.6.8.jar
	spring-aop-4.0.0.RELEASE.jar
	spring-aspects-4.0.0.RELEASE.jar
	
	commons-logging-1.1.3.jar
	spring-beans-4.0.0.RELEASE.jar
	spring-context-4.0.0.RELEASE.jar
	spring-core-4.0.0.RELEASE.jar
	spring-expression-4.0.0.RELEASE.jar
(2)在配置文件中加入aop的命名空间
(3)基于注解的方式：
  1)在配置文件中加入如下配置：
  	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
  	自动为匹配的类生成代理对象
  2)把横切关注点的代码抽象到切面的类中：
  	首先让切面成为SpringIOC容器中的一个bean -> @Component 
  	声明为切面 -> @Aspect
	
ASpectJ切入点表达式：execution(* com.atguigu.spring.aop.impl.*.*(..))

	